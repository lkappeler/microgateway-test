basePath: /v1
consumes:
    - application/xml
    - text/xml
    - application/x-www-form-urlencoded
    - application/json
definitions:
    Error:
        additionalProperties: false
        properties:
            message: {type: [string, array]}
            status: {type: integer}
        type: object
    routes:
        additionalProperties: false
        properties:
            difficulty: {type: string}
            fa: {type: string}
            ffa: {type: string}
            ffs: {type: string}
            height: {type: string}
            id: {format: double, type: number}
            name: {type: string}
            pitches: {type: string}
            style: {type: string}
info:
    contact:
        email: joedeveloper@someemailservice.com
        name: 'Joe API Developer'
        url: 'http://developer.acme.com/contacturl'
    description: 'The /v1 set of Routes APIs'
    license:
        name: 'License Name Goes Here...'
        url: 'http://developer.acme.com/licenseurl'
    termsOfService: 'The Terms of Service for the API are ...'
    title: routes
    version: 1.0.0
    x-ibm-name: routes
paths:
    /routes/test1:
        get:
            deprecated: false
            description: ""
            operationId: routes.test1
            parameters: [{description: 'Criteria to match model instances', format: JSON, in: query, name: where, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Test purposes.'
            tags: [routes]
            security: [{apikeyHeader: []}]
    /routes/test2:
        get:
            deprecated: false
            description: ""
            operationId: routes.test2
            parameters: [{description: 'Criteria to match model instances', format: JSON, in: query, name: where, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Test purposes.'
            tags: [routes]
            security: []
    /routes/test3:
        get:
            deprecated: false
            description: ""
            operationId: routes.test3
            parameters: [{description: 'Criteria to match model instances', format: JSON, in: query, name: where, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Test purposes.'
            tags: [routes]
            security: [{apiSecretHeader: []}, {apikeyHeader: [], apikeyHeaderBogus: []}, {apikeyHeaderBogus: [], apikeyHeader: []}, {apikeyQueryParameter: []}]
    /routes:
        get:
            deprecated: false
            description: ""
            operationId: routes.find
            parameters: [{description: 'Filter defining fields, where, include, order, offset, and limit', format: JSON, in: query, name: filter, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {items: {$ref: '#/definitions/routes'}, type: array}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Find all instances of the model matched by filter from the data source.'
            tags: [routes]
        post:
            deprecated: false
            description: ""
            operationId: routes.create
            parameters: [{description: 'Model instance data', in: body, name: data, required: false, schema: {$ref: '#/definitions/routes'}}]
            responses: {'200': {description: 'Request was successful', schema: {$ref: '#/definitions/routes'}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Create a new instance of the model and persist it into the data source.'
            tags: [routes]
        put:
            deprecated: false
            description: ""
            operationId: routes.upsert
            parameters: [{description: 'Model instance data', in: body, name: data, required: false, schema: {$ref: '#/definitions/routes'}}]
            responses: {'200': {description: 'Request was successful', schema: {$ref: '#/definitions/routes'}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Update an existing model instance or insert a new one into the data source.'
            tags: [routes]
    /routes/change-stream:
        get:
            deprecated: false
            description: ""
            operationId: routes.get.createChangeStream
            parameters: [{format: JSON, in: query, name: options, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Create a change stream.'
            tags: [routes]
        post:
            deprecated: false
            description: ""
            operationId: routes.post.createChangeStream
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Create a change stream.'
            tags: [routes]
    /routes/count:
        get:
            deprecated: false
            description: ""
            operationId: routes.count
            parameters: [{description: 'Criteria to match model instances', format: JSON, in: query, name: where, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Count instances of the model matched by where from the data source.'
            tags: [routes]
    /routes/findOne:
        get:
            deprecated: false
            description: ""
            operationId: routes.findOne
            parameters: [{description: 'Filter defining fields, where, include, order, offset, and limit', format: JSON, in: query, name: filter, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {$ref: '#/definitions/routes'}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Find first instance of the model matched by filter from the data source.'
            tags: [routes]
    /routes/update:
        post:
            deprecated: false
            description: ""
            operationId: routes.updateAll
            parameters: [{description: 'Criteria to match model instances', format: JSON, in: query, name: where, required: false, type: string}, {description: 'An object of model property name/value pairs', in: body, name: data, required: false, schema: {$ref: '#/definitions/routes'}}]
            responses: {'204': {description: 'Request was successful'}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Update instances of the model matched by where from the data source.'
            tags: [routes]
    '/routes/xyz{id}':
        delete:
            deprecated: false
            description: ""
            operationId: routes.deleteById
            parameters: [{description: 'Model id', format: JSON, in: path, name: id, required: true, type: string}]
            responses: {'204': {description: 'Request was successful'}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Delete a model instance by id from the data source.'
            tags: [routes]
        get:
            deprecated: false
            description: ""
            operationId: routes.findById
            parameters: [{description: 'Model id', format: JSON, in: path, name: id, required: true, type: string}, {description: 'Filter defining fields and include', format: JSON, in: query, name: filter, required: false, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {$ref: '#/definitions/routes'}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Find a model instance by id from the data source.'
            tags: [routes]
        head:
            deprecated: false
            description: ""
            operationId: routes.id.exists
            parameters: [{description: 'Model id', format: JSON, in: path, name: id, required: true, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Check whether a model instance exists in the data source.'
            tags: [routes]
        put:
            deprecated: false
            description: ""
            operationId: routes.prototype.updateAttributes
            parameters: [{description: 'An object of model property name/value pairs', in: body, name: data, required: false, schema: {$ref: '#/definitions/routes'}}, {description: 'PersistedModel id', format: JSON, in: path, name: id, required: true, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {$ref: '#/definitions/routes'}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Update attributes for a model instance and persist it into the data source.'
            tags: [routes]
    '/routes/{id}/exists':
        get:
            deprecated: false
            description: ""
            operationId: routes.exists
            parameters: [{description: 'Model id', format: JSON, in: path, name: id, required: true, type: string}]
            responses: {'200': {description: 'Request was successful', schema: {type: object}}, default: {description: 'Unexpected error', schema: {$ref: '#/definitions/Error'}}}
            summary: 'Check whether a model instance exists in the data source.'
            tags: [routes]
produces:
    - application/xml
    - application/javascript
    - text/javascript
    - text/xml
    - application/json
schemes:
    - https
security:
    -
        apiSecretHeader: []
        apikeyHeader: []
    -
        apikeyQueryParameter: []
        apiSecretQueryParameter: []
securityDefinitions:
    apikeyQueryParameter:
        in: query
        name: client_id
        type: apiKey
    apiSecretQueryParameter:
        in: query
        name: client_secret
        type: apiKey
    apiSecretHeader:
        in: header
        name: X-IBM-Client-Secret
        type: apiKey
    apikeyHeader:
        in: header
        name: X-IBM-Client-Id
        type: apiKey
    apikeyHeaderBogus:
        in: header
        name: BogusId
        type: apiKey
    basicAuthentication:
        type: basic
        x-ibm-authentication-registry: corporate-idp
    basicAuthenticationSSL:
        type: basic
        x-ibm-authentication-url:
            tls-profile: new-ssl-profile
            url: 'https://httpbin.org/basic-auth/username1/password1'
swagger: '2.0'
tags:
    -
        name: User
    -
        name: routes
x-ibm-configuration:
    assembly:
        execute:
            - {invoke: {target-url: 'http://127.0.0.1:8889/api3'}}
    cors:
        enabled: false
    enforced: true
    phase: identified
    testable: false
